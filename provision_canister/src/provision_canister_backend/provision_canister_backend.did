type CanisterIds = record {
  minter_canister : principal;
  asset_canister : principal;
};
type NFT_Metadata = record {
  supply_cap : nat16;
  nft_token_id : text;
  desc : text;
  logo : text;
  collection_id : text;
  collection_name : text;
  royalty_percent : nat16;
  nft_uri : text;
  total_supply : nat16;
  nft_symbol : text;
};
type Result = variant { Ok : CanisterIds; Err : text };
type Result_1 = variant { Ok : principal; Err : text };
type Result_2 = variant { Ok : vec principal; Err : text };
type Result_3 = variant { Ok : vec text; Err : text };
type Result_4 = variant { Ok : NFT_Metadata; Err : text };
type Result_5 = variant { Ok : text; Err : text };
service : {
  all_canister_create : (text, text) -> (Result);
  create_new_canister : () -> (Result_1);
  get_all_minter_canisters : () -> (Result_2);
  grant_commit_permission : (principal, principal) -> (text);
  init_collection : (principal) -> (Result_5);
  mint_NFT : (principal, text, text) -> (Result_5);
  revoke_commit_permission : (principal, principal) -> (text);
  filter_status : () -> (Result_2);
}