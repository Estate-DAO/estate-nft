type AdditionalDetails = record {
  year_built : opt nat32;
  occupied : opt text;
  crime_score : opt nat32;
  monthly_rent : opt float32;
  beds : opt nat32;
  affordability : opt float32;
  last_renovation : opt text;
  square_footage : opt float32;
  flood_zone : opt text;
  price_per_sq_foot : opt float32;
  baths : opt nat32;
  school_score : opt nat32;
};
type AdditionalMetadata = record {
  documents : vec vec record { text; text };
  additional_details : opt AdditionalDetails;
  financial_details : opt FinancialDetails;
  market_details : opt MarketDetails;
};
type CollectionMetadata = record {
  status : Status;
  supply_cap : nat16;
  owner : text;
  desc : text;
  additional_metadata : opt AdditionalMetadata;
  name : text;
  collection_id : text;
  property_images : vec text;
  prop_data : opt PropertyData;
  prop_details : opt PropDetails;
  total_supply : nat16;
};
type FinancialDetails = record {
  total_investement_value : opt TotalInvestmentValue;
  total_returns : opt TotalReturns;
  monthly_gross_rents : opt MonthlyGrossRents;
};
type MarketDetails = record {
  average_rent : opt nat32;
  location : opt text;
  median_home_sale_price : opt nat32;
  annual_popullation_growth : opt nat32;
};
type Metadata = record {
  supply_cap : nat16;
  nft_token_id : text;
  desc : text;
  logo : text;
  collection_id : text;
  collection_name : text;
  nft_uri : text;
  total_supply : nat16;
  nft_symbol : text;
};
type MonthlyGrossRents = record {
  total_monthly_cost : opt float32;
  llc_monthly_franchise_tax : opt float32;
  monthly_cash_flow : opt float32;
  property_insurance : opt float32;
  expense_to_income_ratio : opt float32;
  vacancy_rate : opt float32;
  property_taxes : opt float32;
  property_managment_fee : opt float32;
  monthly_utiliiies : opt float32;
};
type PropertyData = record { 
  bed : nat16; 
  area : nat16; 
  bath : nat16 
};
type PropDetails = record {
  year_built : opt nat16;
  purchase_price : opt nat16;
  yields : opt float32;
  projected_rent : opt nat16;
  min_investment : opt float32;
};
type Status = variant { Ended; Live; Upcoming };
type Result = variant { Ok : CollectionMetadata; Err : text };
type Result_1 = variant { Ok : MarketDetails; Err : text };
type Result_2 = variant { Ok : Metadata; Err : text };
type Result_3 = variant { Ok : text; Err : text };
type Result_4 = variant { Ok : Status; Err : text };
type Result_5 = variant { Ok : PropertyData; Err : text };
type Result_6 = variant { Ok : principal; Err : text };
type TotalInvestmentValue = record {
  homebase_closing_fee : opt text;
  initial_mainatance_reserve : opt float32;
  underlying_asset_price : opt float32;
};
type TotalReturns = record {
  average_5_year_roi : opt float32;
  projected_appreciation : opt float32;
  cap_rate : opt float32;
};
service : {
  collection_image : () -> (vec text) query;
  get_collection_metadata : () -> (Result) query;
  get_market_details : () -> (Result_1) query;
  get_metadata : (text) -> (Result_2) query;
  update_additional_details : (AdditionalDetails) -> (Result_3);
  update_financial_details : (FinancialDetails) -> (Result_3);
  update_market_details : (MarketDetails) -> (Result_3);
  update_prop_det : (PropDetails) -> (Result_3);
  update_doc_details : (vec vec record { text; text }) -> (Result_3);
  mint : (text, text, principal) -> (Result_3);
  get_collection_status : () -> (Result_4) query;
  update_prop_data : (PropertyData) -> (Result_3);
  get_prop_data : () -> (Result_5) query;
  init_collection : (text, text, principal) -> (Result_3);
  get_owner_of_NFT : (text) -> (Result_6);
}